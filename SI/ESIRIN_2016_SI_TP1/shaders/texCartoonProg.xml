<?xml version="1.0" encoding="UTF-8"?>

<SHADER name="texCartoonProg">
	<VERTEX>
		// attributes inputs  (vertex arrays)
			attribute vec3 aVertexPosition;
			attribute vec3 aVertexNormal;
			attribute vec3 aVertexColor;

		// uniform matrices
			uniform mat4 uMVMatrix;
			uniform mat4 uPMatrix;
			uniform mat3 uNMatrix;

		// output (to fragment shader)
			varying vec4 vPosition; 
			varying vec3 vNormal; 
			varying vec3 vcolor;

		void main(void) {
			// model -> view 
			vPosition = uMVMatrix * vec4(aVertexPosition, 1.0);
			gl_Position = uPMatrix * vPosition;

			// vNormal
			vNormal = uNMatrix * aVertexNormal;	

			// vcolor
			vcolor = aVertexColor;
		}
	</VERTEX>
	<FRAGMENT>
		#ifdef GL_ES
		precision highp float;
		#endif
		
		// varying input (output of the vertex shader)
			varying vec4 vPosition; 
			varying vec3 vNormal; 
			varying vec3 vcolor;
				
		// lights
			uniform vec3 uAmbientColor;
			uniform vec3 uPointLightPosition0; 
			uniform vec3 uPointLightColor0;

		// local constant - could be uniform
			// edge color
			vec3 edgeColor = vec3(0.0,0.0,0.0);
			// shadow color
			vec3 shadowColor = vec3(0.0, 0.0, 0.5);
			// midtoneColor
			vec3 midtoneColor = vec3(0.0,0.0,1.0);
			// highlight color
			vec3 highLightColor = vec3(1.0,1.0, 1.0);

			// diffuse specular shininess
			float Kd = 0.5 ; 
			float Ks = 0.5 ; 
			float sh = 8.0 ;

			// thresholds
			float shadowMidtone = 0.0;
			float midToneHighLight = 0.75 ;
			float edgeThreshold = 0.95 ; 
			
		// main
		void main(void) {	
			// light direction
			vec3 lightDirection = normalize(uPointLightPosition0 - vPosition.xyz);
			// eye direction
			vec3 eyeDirection = normalize(-vPosition.xyz);
			// normalize normal
			vec3 normal = normalize(vNormal);
			// reflection direction
			vec3 reflectDirection = normalize(reflect(-lightDirection,normal));
			
			//  diffuse term
			float diffuse = max(dot(normal, lightDirection), 0.0);	
			// specular term
			float specular = pow(max(dot(reflectDirection,eyeDirection),0.0),sh);
			
			// light
			float light = Kd*diffuse + Ks*specular;
				// edge term
			float edge = sqrt(1.0 - pow(max(dot(normal,eyeDirection),0.0),2.0));
					
			// color
			 vec3 final = vec3(1.0,0.0,0.0);
			  if (edge > edgeThreshold)				{ final = edgeColor;}
			  else if (shadowMidtone >= light) 		{ final = shadowColor;}
			  else if (midToneHighLight >= light)		{ final = midtoneColor;}
			  else 								{ final = highLightColor;}

			  gl_FragColor = vec4(final,1.0);
		}



	</FRAGMENT>
</SHADER>